{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "tmp/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "tmp/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "tmp/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "badge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-badge.stories.ts",
                "type": "string",
                "defaultValue": "'[matBadge]=\"content\" [matBadgeOverlap]=\"overlap\" [matBadgeDisabled]=\"disabled\" [matBadgeHidden]=\"hidden\" [matBadgePosition]=\"position\" [matBadgeSize]=\"size\" [matBadgeColor]=\"color\"'"
            },
            {
                "name": "badgePositions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/types.ts",
                "type": "BadgePosition[]",
                "defaultValue": "Object.values(BadgePosition)"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createButton(ButtonType.Basic)"
            },
            {
                "name": "button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "`<button %s\n    [color]=\"color\"\n    [disableRipple]=\"disableRipple\"\n    [disabled]=\"disabled\"\n    (click)=\"click($event)\">{{label}}</button>`"
            },
            {
                "name": "ButtonBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-badge.stories.ts",
                "type": "Story",
                "defaultValue": "props => ({template: `<button mat-raised-button color=\"primary\" ${badge}>Action</button>`, props})"
            },
            {
                "name": "buttonIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "`<button %s\n    [color]=\"color\"\n    [disableRipple]=\"disableRipple\"\n    [disabled]=\"disabled\"\n    (click)=\"click($event)\"><mat-icon>{{icon}}</mat-icon></button>`"
            },
            {
                "name": "Buttons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button-toggle.stories.ts",
                "type": "Story",
                "defaultValue": "props => ({template: toggle, props})"
            },
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "Story<MatButton>",
                "defaultValue": "(props: TypedButton) => ({template: format(button, props.type), props})"
            },
            {
                "name": "buttonTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/types.ts",
                "type": "ButtonType[]",
                "defaultValue": "Object.values(ButtonType)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "copyStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/utils.ts",
                "type": "",
                "defaultValue": "(storyFn: Story, args: Record<string, string> = {}) => {\n  const story = storyFn.bind({});\n  story.args = {...args};\n  return story;\n}"
            },
            {
                "name": "createButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "(type: ButtonType) => copyStory(ButtonStory, {type})"
            },
            {
                "name": "createIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "(type: IconType) => copyStory(IconButtonStory, {type})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Fab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createIcon(IconType.Fab)"
            },
            {
                "name": "Flat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createButton(ButtonType.Flat)"
            },
            {
                "name": "format",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/utils.ts",
                "type": "",
                "defaultValue": "(tpl: string, ...args: string[]) => args.reduce((acc, val) => acc.replace('%s', val), tpl)"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createIcon(IconType.Icon)"
            },
            {
                "name": "IconBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-badge.stories.ts",
                "type": "Story",
                "defaultValue": "props => ({template: `<mat-icon ${badge}>home</mat-icon>`, props})"
            },
            {
                "name": "IconButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button-toggle.stories.ts",
                "type": "Story",
                "defaultValue": "props => ({template: toggleIcons, props})"
            },
            {
                "name": "IconButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "Story<MatButton>",
                "defaultValue": "(props: TypedButton) => ({template: format(buttonIcon, props.type), props})"
            },
            {
                "name": "iconTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/types.ts",
                "type": "IconType[]",
                "defaultValue": "Object.values(IconType)"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MatControls",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/common/mat-controls.ts",
                "type": "object",
                "defaultValue": "{\n  Color: {control: {type: 'inline-radio', options: ['primary', 'accent', 'warn']}},\n  Appearance: {control: {type: 'inline-radio', options: ['standard', 'legacy']}},\n  Boolean: {control: 'boolean'},\n  Text: {control: 'text'},\n  Icons: {control: {type: 'select', options: ['home', 'favorite', 'open_in_new', 'menu']}},\n  Size: {control: {type: 'select', options: ['small', 'medium', 'large']}},\n\n  select(options: string[]): any {\n    return {control: {type: 'select', options}};\n  }\n}"
            },
            {
                "name": "MiniFab",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createIcon(IconType.MiniFab)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Raised",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createButton(ButtonType.Raised)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Stroked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button.stories.ts",
                "type": "",
                "defaultValue": "createButton(ButtonType.Stroked)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tmp/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "TextBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-badge.stories.ts",
                "type": "Story",
                "defaultValue": "props => ({template: `<span ${badge}>Text with a badge</span>`, props})"
            },
            {
                "name": "toggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button-toggle.stories.ts",
                "type": "",
                "defaultValue": "`<mat-button-toggle-group\n  (change)=\"change($event)\"\n  [appearance]=\"appearance\"\n  [disabled]=\"disabled\"\n  [multiple]=\"multiple\"\n  [name]=\"name\"\n  [value]=\"value\"\n  [vertical]=\"vertical\">\n  <mat-button-toggle value=\"bold\">Bold</mat-button-toggle>\n  <mat-button-toggle value=\"italic\">Italic</mat-button-toggle>\n  <mat-button-toggle value=\"underline\">Underline</mat-button-toggle>\n</mat-button-toggle-group>`"
            },
            {
                "name": "toggleIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mat-button-toggle.stories.ts",
                "type": "",
                "defaultValue": "`<mat-button-toggle-group\n  (change)=\"change($event)\"\n  [appearance]=\"appearance\"\n  [disabled]=\"disabled\"\n  [multiple]=\"multiple\"\n  [name]=\"name\"\n  [value]=\"value\"\n  [vertical]=\"vertical\">\n  <mat-button-toggle value=\"left\" aria-label=\"Text align left\">\n    <mat-icon>format_align_left</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"center\" aria-label=\"Text align center\">\n    <mat-icon>format_align_center</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"right\" aria-label=\"Text align right\">\n    <mat-icon>format_align_right</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"justify\" disabled aria-label=\"Text align justify\">\n    <mat-icon>format_align_justify</mat-icon>\n  </mat-button-toggle>\n</mat-button-toggle-group>`"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "TypedButton",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/stories/mat-button.stories.ts",
                "description": "",
                "kind": 169
            }
        ],
        "enumerations": [
            {
                "name": "BadgePosition",
                "childs": [
                    {
                        "name": "AboveAfter",
                        "value": "above after"
                    },
                    {
                        "name": "AboveBefore",
                        "value": "above before"
                    },
                    {
                        "name": "BelowBefore",
                        "value": "below before"
                    },
                    {
                        "name": "BelowAfter",
                        "value": "below after"
                    },
                    {
                        "name": "Before",
                        "value": "before"
                    },
                    {
                        "name": "After",
                        "value": "after"
                    },
                    {
                        "name": "Above",
                        "value": "above"
                    },
                    {
                        "name": "Below",
                        "value": "below"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/stories/common/types.ts"
            },
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "Basic",
                        "value": "mat-button"
                    },
                    {
                        "name": "Raised",
                        "value": "mat-raised-button"
                    },
                    {
                        "name": "Stroked",
                        "value": "mat-stroked-button"
                    },
                    {
                        "name": "Flat",
                        "value": "mat-flat-button"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/stories/common/types.ts"
            },
            {
                "name": "IconType",
                "childs": [
                    {
                        "name": "Icon",
                        "value": "mat-icon-button"
                    },
                    {
                        "name": "Fab",
                        "value": "mat-fab"
                    },
                    {
                        "name": "MiniFab",
                        "value": "mat-mini-fab"
                    },
                    {
                        "name": "PlaceHolder",
                        "value": "{{icon}}"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/stories/common/types.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/mat-badge.stories.ts": [
                {
                    "name": "badge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-badge.stories.ts",
                    "type": "string",
                    "defaultValue": "'[matBadge]=\"content\" [matBadgeOverlap]=\"overlap\" [matBadgeDisabled]=\"disabled\" [matBadgeHidden]=\"hidden\" [matBadgePosition]=\"position\" [matBadgeSize]=\"size\" [matBadgeColor]=\"color\"'"
                },
                {
                    "name": "ButtonBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-badge.stories.ts",
                    "type": "Story",
                    "defaultValue": "props => ({template: `<button mat-raised-button color=\"primary\" ${badge}>Action</button>`, props})"
                },
                {
                    "name": "IconBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-badge.stories.ts",
                    "type": "Story",
                    "defaultValue": "props => ({template: `<mat-icon ${badge}>home</mat-icon>`, props})"
                },
                {
                    "name": "TextBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-badge.stories.ts",
                    "type": "Story",
                    "defaultValue": "props => ({template: `<span ${badge}>Text with a badge</span>`, props})"
                }
            ],
            "src/stories/common/types.ts": [
                {
                    "name": "badgePositions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/types.ts",
                    "type": "BadgePosition[]",
                    "defaultValue": "Object.values(BadgePosition)"
                },
                {
                    "name": "buttonTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/types.ts",
                    "type": "ButtonType[]",
                    "defaultValue": "Object.values(ButtonType)"
                },
                {
                    "name": "iconTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/types.ts",
                    "type": "IconType[]",
                    "defaultValue": "Object.values(IconType)"
                }
            ],
            "src/stories/mat-button.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createButton(ButtonType.Basic)"
                },
                {
                    "name": "button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "`<button %s\n    [color]=\"color\"\n    [disableRipple]=\"disableRipple\"\n    [disabled]=\"disabled\"\n    (click)=\"click($event)\">{{label}}</button>`"
                },
                {
                    "name": "buttonIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "`<button %s\n    [color]=\"color\"\n    [disableRipple]=\"disableRipple\"\n    [disabled]=\"disabled\"\n    (click)=\"click($event)\"><mat-icon>{{icon}}</mat-icon></button>`"
                },
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "Story<MatButton>",
                    "defaultValue": "(props: TypedButton) => ({template: format(button, props.type), props})"
                },
                {
                    "name": "createButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "(type: ButtonType) => copyStory(ButtonStory, {type})"
                },
                {
                    "name": "createIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "(type: IconType) => copyStory(IconButtonStory, {type})"
                },
                {
                    "name": "Fab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createIcon(IconType.Fab)"
                },
                {
                    "name": "Flat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createButton(ButtonType.Flat)"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createIcon(IconType.Icon)"
                },
                {
                    "name": "IconButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "Story<MatButton>",
                    "defaultValue": "(props: TypedButton) => ({template: format(buttonIcon, props.type), props})"
                },
                {
                    "name": "MiniFab",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createIcon(IconType.MiniFab)"
                },
                {
                    "name": "Raised",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createButton(ButtonType.Raised)"
                },
                {
                    "name": "Stroked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button.stories.ts",
                    "type": "",
                    "defaultValue": "createButton(ButtonType.Stroked)"
                }
            ],
            "src/stories/mat-button-toggle.stories.ts": [
                {
                    "name": "Buttons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button-toggle.stories.ts",
                    "type": "Story",
                    "defaultValue": "props => ({template: toggle, props})"
                },
                {
                    "name": "IconButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button-toggle.stories.ts",
                    "type": "Story",
                    "defaultValue": "props => ({template: toggleIcons, props})"
                },
                {
                    "name": "toggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button-toggle.stories.ts",
                    "type": "",
                    "defaultValue": "`<mat-button-toggle-group\n  (change)=\"change($event)\"\n  [appearance]=\"appearance\"\n  [disabled]=\"disabled\"\n  [multiple]=\"multiple\"\n  [name]=\"name\"\n  [value]=\"value\"\n  [vertical]=\"vertical\">\n  <mat-button-toggle value=\"bold\">Bold</mat-button-toggle>\n  <mat-button-toggle value=\"italic\">Italic</mat-button-toggle>\n  <mat-button-toggle value=\"underline\">Underline</mat-button-toggle>\n</mat-button-toggle-group>`"
                },
                {
                    "name": "toggleIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mat-button-toggle.stories.ts",
                    "type": "",
                    "defaultValue": "`<mat-button-toggle-group\n  (change)=\"change($event)\"\n  [appearance]=\"appearance\"\n  [disabled]=\"disabled\"\n  [multiple]=\"multiple\"\n  [name]=\"name\"\n  [value]=\"value\"\n  [vertical]=\"vertical\">\n  <mat-button-toggle value=\"left\" aria-label=\"Text align left\">\n    <mat-icon>format_align_left</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"center\" aria-label=\"Text align center\">\n    <mat-icon>format_align_center</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"right\" aria-label=\"Text align right\">\n    <mat-icon>format_align_right</mat-icon>\n  </mat-button-toggle>\n  <mat-button-toggle value=\"justify\" disabled aria-label=\"Text align justify\">\n    <mat-icon>format_align_justify</mat-icon>\n  </mat-button-toggle>\n</mat-button-toggle-group>`"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/common/utils.ts": [
                {
                    "name": "copyStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/utils.ts",
                    "type": "",
                    "defaultValue": "(storyFn: Story, args: Record<string, string> = {}) => {\n  const story = storyFn.bind({});\n  story.args = {...args};\n  return story;\n}"
                },
                {
                    "name": "format",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/utils.ts",
                    "type": "",
                    "defaultValue": "(tpl: string, ...args: string[]) => args.reduce((acc, val) => acc.replace('%s', val), tpl)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "tmp/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "tmp/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "tmp/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tmp/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/common/mat-controls.ts": [
                {
                    "name": "MatControls",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/common/mat-controls.ts",
                    "type": "object",
                    "defaultValue": "{\n  Color: {control: {type: 'inline-radio', options: ['primary', 'accent', 'warn']}},\n  Appearance: {control: {type: 'inline-radio', options: ['standard', 'legacy']}},\n  Boolean: {control: 'boolean'},\n  Text: {control: 'text'},\n  Icons: {control: {type: 'select', options: ['home', 'favorite', 'open_in_new', 'menu']}},\n  Size: {control: {type: 'select', options: ['small', 'medium', 'large']}},\n\n  select(options: string[]): any {\n    return {control: {type: 'select', options}};\n  }\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/stories/common/types.ts": [
                {
                    "name": "BadgePosition",
                    "childs": [
                        {
                            "name": "AboveAfter",
                            "value": "above after"
                        },
                        {
                            "name": "AboveBefore",
                            "value": "above before"
                        },
                        {
                            "name": "BelowBefore",
                            "value": "below before"
                        },
                        {
                            "name": "BelowAfter",
                            "value": "below after"
                        },
                        {
                            "name": "Before",
                            "value": "before"
                        },
                        {
                            "name": "After",
                            "value": "after"
                        },
                        {
                            "name": "Above",
                            "value": "above"
                        },
                        {
                            "name": "Below",
                            "value": "below"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/stories/common/types.ts"
                },
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "Basic",
                            "value": "mat-button"
                        },
                        {
                            "name": "Raised",
                            "value": "mat-raised-button"
                        },
                        {
                            "name": "Stroked",
                            "value": "mat-stroked-button"
                        },
                        {
                            "name": "Flat",
                            "value": "mat-flat-button"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/stories/common/types.ts"
                },
                {
                    "name": "IconType",
                    "childs": [
                        {
                            "name": "Icon",
                            "value": "mat-icon-button"
                        },
                        {
                            "name": "Fab",
                            "value": "mat-fab"
                        },
                        {
                            "name": "MiniFab",
                            "value": "mat-mini-fab"
                        },
                        {
                            "name": "PlaceHolder",
                            "value": "{{icon}}"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/stories/common/types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/mat-button.stories.ts": [
                {
                    "name": "TypedButton",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/stories/mat-button.stories.ts",
                    "description": "",
                    "kind": 169
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/mat-controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MatControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "badgePositions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/types.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/common/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "format",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "badge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Buttons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggleIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Fab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Flat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MiniFab",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Raised",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mat-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Stroked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tmp/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "tmp/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "tmp/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}